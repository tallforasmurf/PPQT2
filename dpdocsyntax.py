
# The following two lines have to manually replace two
# imports generated by YAPPS
import re
import yapps_runtime as runtime

class DPDOCScanner(runtime.Scanner):
    patterns = [
        ('END', re.compile('\\$')),
        ('LINE', re.compile('L')),
        ('EMPTY', re.compile('E')),
        ('XOPEN', re.compile('X')),
        ('XCLOSE', re.compile('x')),
        ('ROPEN', re.compile('R')),
        ('RCLOSE', re.compile('r')),
        ('COPEN', re.compile('C')),
        ('CCLOSE', re.compile('c')),
        ('TOPEN', re.compile('T')),
        ('TCLOSE', re.compile('t')),
        ('POPEN', re.compile('P')),
        ('PCLOSE', re.compile('p')),
        ('FOPEN', re.compile('F')),
        ('IOPEN', re.compile('I')),
        ('SOPEN', re.compile('S')),
        ('BCLOSE', re.compile('\\]')),
        ('QOPEN', re.compile('Q')),
        ('QCLOSE', re.compile('q')),
        ('NOPEN', re.compile('N')),
        ('NCLOSE', re.compile('n')),
        ('UOPEN', re.compile('U')),
        ('UCLOSE', re.compile('u')),
        ('TBSYMB', re.compile('%')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{},str,*args,**kw)

class DPDOC(runtime.Parser):
    Context = runtime.Context
    def TBREAK(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'TBREAK', [])
        TBSYMB = self._scan('TBSYMB', context=_context)
        if self._peek('EMPTY', 'XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', 'BCLOSE', 'END', 'QCLOSE', 'UCLOSE', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def NOFILL(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'NOFILL', [])
        XOPEN = self._scan('XOPEN', context=_context)
        while self._peek('XCLOSE', 'LINE', 'EMPTY', context=_context) != 'XCLOSE':
            _token = self._peek('LINE', 'EMPTY', context=_context)
            if _token == 'LINE':
                LINE = self._scan('LINE', context=_context)
            else: # == 'EMPTY'
                EMPTY = self._scan('EMPTY', context=_context)
        XCLOSE = self._scan('XCLOSE', context=_context)
        if self._peek('EMPTY', 'LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'TOPEN', 'QOPEN', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'QCLOSE', 'BCLOSE', 'UCLOSE', 'END', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def RIGHT(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'RIGHT', [])
        ROPEN = self._scan('ROPEN', context=_context)
        while self._peek('RCLOSE', 'LINE', 'EMPTY', context=_context) != 'RCLOSE':
            _token = self._peek('LINE', 'EMPTY', context=_context)
            if _token == 'LINE':
                LINE = self._scan('LINE', context=_context)
            else: # == 'EMPTY'
                EMPTY = self._scan('EMPTY', context=_context)
        RCLOSE = self._scan('RCLOSE', context=_context)
        if self._peek('EMPTY', 'LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'QCLOSE', 'QOPEN', 'TOPEN', 'BCLOSE', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'END', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def CENTER(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'CENTER', [])
        COPEN = self._scan('COPEN', context=_context)
        while self._peek('CCLOSE', 'LINE', 'EMPTY', context=_context) != 'CCLOSE':
            _token = self._peek('LINE', 'EMPTY', context=_context)
            if _token == 'LINE':
                LINE = self._scan('LINE', context=_context)
            else: # == 'EMPTY'
                EMPTY = self._scan('EMPTY', context=_context)
        CCLOSE = self._scan('CCLOSE', context=_context)
        if self._peek('EMPTY', 'LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'QCLOSE', 'QOPEN', 'TOPEN', 'BCLOSE', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'END', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def TABLE(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'TABLE', [])
        TOPEN = self._scan('TOPEN', context=_context)
        while self._peek('TCLOSE', 'LINE', 'EMPTY', context=_context) != 'TCLOSE':
            _token = self._peek('LINE', 'EMPTY', context=_context)
            if _token == 'LINE':
                LINE = self._scan('LINE', context=_context)
            else: # == 'EMPTY'
                EMPTY = self._scan('EMPTY', context=_context)
        TCLOSE = self._scan('TCLOSE', context=_context)
        if self._peek('EMPTY', 'LINE', 'POPEN', 'TOPEN', 'QOPEN', 'UOPEN', 'BCLOSE', 'ROPEN', 'COPEN', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'QCLOSE', 'END', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def POEM(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'POEM', [])
        POPEN = self._scan('POPEN', context=_context)
        while self._peek('PCLOSE', 'LINE', 'EMPTY', context=_context) != 'PCLOSE':
            _token = self._peek('LINE', 'EMPTY', context=_context)
            if _token == 'LINE':
                LINE = self._scan('LINE', context=_context)
            else: # == 'EMPTY'
                EMPTY = self._scan('EMPTY', context=_context)
        PCLOSE = self._scan('PCLOSE', context=_context)
        if self._peek('EMPTY', 'LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'TOPEN', 'QOPEN', 'QCLOSE', 'BCLOSE', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'END', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def PARA(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'PARA', [])
        LINE = self._scan('LINE', context=_context)
        open_para()
        while self._peek('EMPTY', 'END', 'LINE', context=_context) == 'LINE':
            LINE = self._scan('LINE', context=_context)
        _token = self._peek('EMPTY', 'END', context=_context)
        if _token == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)
        else: # == 'END'
            END = self._scan('END', context=_context)
        close_para()

    def HEAD(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'HEAD', [])
        EMPTY = self._scan('EMPTY', context=_context)
        open_head()
        _token = self._peek('LINE', 'EMPTY', context=_context)
        if _token == 'LINE':
            PARA = self.PARA(_context)
            close_head(3)
        else: # == 'EMPTY'
            EMPTY = self._scan('EMPTY', context=_context)
            EMPTY = self._scan('EMPTY', context=_context)
            while 1:
                PARA = self.PARA(_context)
                if self._peek('LINE', 'EMPTY', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'TOPEN', 'QOPEN', 'BCLOSE', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'QCLOSE', 'END', 'NCLOSE', context=_context) != 'LINE': break
            EMPTY = self._scan('EMPTY', context=_context)
            close_head(2)

    def ULIST(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'ULIST', [])
        UOPEN = self._scan('UOPEN', context=_context)
        while self._peek('UCLOSE', 'LINE', 'EMPTY', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'TOPEN', 'QOPEN', 'BCLOSE', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'QCLOSE', 'END', 'NCLOSE', context=_context) in ['LINE', 'EMPTY']:
            _token = self._peek('LINE', 'EMPTY', context=_context)
            if _token == 'LINE':
                PARA = self.PARA(_context)
            else: # == 'EMPTY'
                EMPTY = self._scan('EMPTY', context=_context)
        UCLOSE = self._scan('UCLOSE', context=_context)
        if self._peek('EMPTY', 'LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'TOPEN', 'QOPEN', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'QCLOSE', 'BCLOSE', 'UCLOSE', 'END', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def QUOTE(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'QUOTE', [])
        QOPEN = self._scan('QOPEN', context=_context)
        while 1:
            _token = self._peek('LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'EMPTY', 'QOPEN', context=_context)
            if _token == 'LINE':
                PARA = self.PARA(_context)
            elif _token == 'POPEN':
                POEM = self.POEM(_context)
            elif _token == 'ROPEN':
                RIGHT = self.RIGHT(_context)
            elif _token == 'COPEN':
                CENTER = self.CENTER(_context)
            elif _token == 'UOPEN':
                ULIST = self.ULIST(_context)
            elif _token == 'QOPEN':
                QUOTE = self.QUOTE(_context)
            else: # == 'EMPTY'
                EMPTY = self._scan('EMPTY', context=_context)
            if self._peek('LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'EMPTY', 'QOPEN', 'QCLOSE', 'TOPEN', 'BCLOSE', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'END', 'NCLOSE', context=_context) not in ['LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'EMPTY', 'QOPEN']: break
        QCLOSE = self._scan('QCLOSE', context=_context)
        if self._peek('EMPTY', 'LINE', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'TOPEN', 'QOPEN', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'QCLOSE', 'BCLOSE', 'UCLOSE', 'END', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def FIGURE(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'FIGURE', [])
        IOPEN = self._scan('IOPEN', context=_context)
        while 1:
            _token = self._peek('LINE', 'POPEN', 'TOPEN', 'QOPEN', 'UOPEN', 'EMPTY', context=_context)
            if _token == 'LINE':
                PARA = self.PARA(_context)
            elif _token == 'POPEN':
                POEM = self.POEM(_context)
            elif _token == 'TOPEN':
                TABLE = self.TABLE(_context)
            elif _token == 'QOPEN':
                QUOTE = self.QUOTE(_context)
            elif _token == 'UOPEN':
                ULIST = self.ULIST(_context)
            else: # == 'EMPTY'
                EMPTY = self._scan('EMPTY', context=_context)
            if self._peek('LINE', 'POPEN', 'TOPEN', 'QOPEN', 'UOPEN', 'EMPTY', 'BCLOSE', 'ROPEN', 'COPEN', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'QCLOSE', 'END', 'NCLOSE', context=_context) not in ['LINE', 'POPEN', 'TOPEN', 'QOPEN', 'UOPEN', 'EMPTY']: break
        BCLOSE = self._scan('BCLOSE', context=_context)
        close_note()
        if self._peek('EMPTY', 'XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', 'BCLOSE', 'END', 'QCLOSE', 'UCLOSE', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def SNOTE(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'SNOTE', [])
        SOPEN = self._scan('SOPEN', context=_context)
        while 1:
            PARA = self.PARA(_context)
            if self._peek('LINE', 'BCLOSE', 'EMPTY', 'POPEN', 'ROPEN', 'COPEN', 'UOPEN', 'TOPEN', 'QOPEN', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'QCLOSE', 'END', 'NCLOSE', context=_context) != 'LINE': break
        BCLOSE = self._scan('BCLOSE', context=_context)
        close_note()
        if self._peek('EMPTY', 'XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', 'BCLOSE', 'END', 'QCLOSE', 'UCLOSE', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def FNOTE(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'FNOTE', [])
        FOPEN = self._scan('FOPEN', context=_context)
        while 1:
            _token = self._peek('LINE', 'POPEN', 'TOPEN', 'QOPEN', 'UOPEN', context=_context)
            if _token == 'LINE':
                PARA = self.PARA(_context)
            elif _token == 'POPEN':
                POEM = self.POEM(_context)
            elif _token == 'TOPEN':
                TABLE = self.TABLE(_context)
            elif _token == 'QOPEN':
                QUOTE = self.QUOTE(_context)
            else: # == 'UOPEN'
                ULIST = self.ULIST(_context)
            if self._peek('LINE', 'POPEN', 'TOPEN', 'QOPEN', 'UOPEN', 'BCLOSE', 'EMPTY', 'ROPEN', 'COPEN', 'XOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'TBSYMB', 'UCLOSE', 'QCLOSE', 'END', 'NCLOSE', context=_context) not in ['LINE', 'POPEN', 'TOPEN', 'QOPEN', 'UOPEN']: break
        BCLOSE = self._scan('BCLOSE', context=_context)
        close_note()
        if self._peek('EMPTY', 'FOPEN', 'XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'QOPEN', 'IOPEN', 'SOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', 'NCLOSE', 'BCLOSE', 'END', 'QCLOSE', 'UCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def FZONE(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'FZONE', [])
        NOPEN = self._scan('NOPEN', context=_context)
        while self._peek('NCLOSE', 'EMPTY', 'FOPEN', 'XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'QOPEN', 'IOPEN', 'SOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', 'BCLOSE', 'END', 'QCLOSE', 'UCLOSE', context=_context) in ['EMPTY', 'FOPEN']:
            _token = self._peek('EMPTY', 'FOPEN', context=_context)
            if _token == 'EMPTY':
                HEAD = self.HEAD(_context)
                check_head()
            else: # == 'FOPEN'
                FNOTE = self.FNOTE(_context)
        NCLOSE = self._scan('NCLOSE', context=_context)
        if self._peek('EMPTY', 'XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', 'BCLOSE', 'END', 'QCLOSE', 'UCLOSE', 'NCLOSE', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)

    def NOFILLS(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'NOFILLS', [])
        _token = self._peek('XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', context=_context)
        if _token == 'XOPEN':
            NOFILL = self.NOFILL(_context)
        elif _token == 'ROPEN':
            RIGHT = self.RIGHT(_context)
        elif _token == 'COPEN':
            CENTER = self.CENTER(_context)
        elif _token == 'TOPEN':
            TABLE = self.TABLE(_context)
        else: # == 'POPEN'
            POEM = self.POEM(_context)

    def goal(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'goal', [])
        while self._peek('XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'EMPTY', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)
        while 1:
            _token = self._peek('XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'EMPTY', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', context=_context)
            if _token not in ['LINE', 'EMPTY', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB']:
                NOFILLS = self.NOFILLS(_context)
            elif _token == 'LINE':
                PARA = self.PARA(_context)
            elif _token == 'EMPTY':
                HEAD = self.HEAD(_context)
            elif _token == 'QOPEN':
                QUOTE = self.QUOTE(_context)
            elif _token == 'IOPEN':
                FIGURE = self.FIGURE(_context)
            elif _token == 'SOPEN':
                SNOTE = self.SNOTE(_context)
            elif _token == 'FOPEN':
                FNOTE = self.FNOTE(_context)
            elif _token == 'NOPEN':
                FZONE = self.FZONE(_context)
            elif _token == 'UOPEN':
                ULIST = self.ULIST(_context)
            else: # == 'TBSYMB'
                TBREAK = self.TBREAK(_context)
            if self._peek('XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'EMPTY', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB', 'END', 'BCLOSE', 'QCLOSE', 'UCLOSE', 'NCLOSE', context=_context) not in ['XOPEN', 'ROPEN', 'COPEN', 'TOPEN', 'POPEN', 'LINE', 'EMPTY', 'QOPEN', 'IOPEN', 'SOPEN', 'FOPEN', 'NOPEN', 'UOPEN', 'TBSYMB']: break
        while self._peek('END', 'EMPTY', context=_context) == 'EMPTY':
            EMPTY = self._scan('EMPTY', context=_context)
        END = self._scan('END', context=_context)


def parse(rule, text):
    P = DPDOC(DPDOCScanner(text))
    return runtime.wrap_error_reporter(P, rule)

# End -- grammar generated by Yapps



if __name__=='__main__':
    pass

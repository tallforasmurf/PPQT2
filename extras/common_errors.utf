# Search for common problems.
#
# Saved user-buttons from the Find panel. Each button definition starts with
# a number between 0 (upper left button) and 23 (lower right button) and a
# colon. Next comes a Python dictionary { key:value, key:value...} in which
# each key is a string such as 'find' or 'regex' that names a part of the Find
# panel. Each value is either True, False, or a 'quoted string' In any quoted
# string, every backslash must be doubled!
#
# Whitespace preceding punctuation or following a hyphen.
# Regex is: whitespace then punctuation, or hyphen then whitespace
# Note whitespace includes newline, and this finds lines that start
# with punctuation or that end with a hyphen.
8: {		'all' : None,
	'andnext' : None,
	'andprior' : None,
	'case' : False,
	'find' : '(\\s[\\.,;:?!\\-])|(-\\s)',
	'label' : 'spacep',
	'regex' : True,
	'rep1' : None,
	'rep2' : None,
	'rep3' : None,
	'tooltip' : 'Whitespace preceding punctuation or after hyphen',
	'word' : None
}

9: {		'all' : None,
	'andnext' : None,
	'andprior' : None,
	'case' : None,
	'find' : '\\W[01]\\W',
	'label' : '-01-',
	'regex' : True,
	'rep1' : None,
	'rep2' : None,
	'rep3' : None,
	'tooltip' : 'Standalone 0 or 1',
	'word' : None
}
# Find some unbalanced punctuation.
# regex is: left-paren, any amount of not-right-paren, left-paren;
# or, left-bracket, any amount of not-right-bracket, left-bracket;
# or, left-brace, any amount of not-right-brace, left-brace;
# or, less-than, any amount of not-greater-than, less-than.
# Does not find an orphan right-delimiter )]}> nor an orphan
# left-delimiater ([{< at the end of the file.
10: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : False,
	'find' : '(\\([^)]+\\()|(\\[[^\\]]+\\[)|(\\{[^}]+\\{)|(<[^>]+<)',
	'label' : 'unbalanced',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find open-bracket that is not followed by closing bracket',
	'word' : False
}
# Find dot followed by lowercase letter. Use Unicode-property test so as
# not to be dependent on Latin-1.
11: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : True,
	'find' : '\\.\\s*\\p{Lowercase_Letter}',
	'label' : 'dota',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find period, space, lowercase',
	'word' : False
}
# Find comma followed by uppercase letter. Use Unicode-property test.
# Note this finds many false positives, I think (", I").
12: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : True,
	'find' : ',\\s*\\p{Uppercase_Letter}',
	'label' : 'commaA',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find comma, space, uppercase (often valid)',
	'word' : False
}
# Find a one-letter line. This could be done as \\n[^\\n]\\n but
# that selects the newlines as well. The following regex demonstrates
# lookbehind and lookahead assertions to say, "find one not-a-newline
# which is preceded by a newline and followed by a newline, but do
# not select those newlines."
13: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : True,
	'find' : '(?<=\\n)[^\\n](?=\\n)',
	'label' : '1-letter',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find a one-letter line',
	'word' : False
}
# Find a lowercase letter that follows two newlines, therefore the start
# of a paragraph. Use a lookbehind assertion so as not to select the
# newlines, and a Unicode property test.
14: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : True,
	'find' : '(?<=\\n\\n)\\p{Lowercase_Letter}',
	'label' : 'lcpara',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Paragraph (text after two newlines) starts with lowercase',
	'word' : False
}
# Find any character that is not in Latin-1. The regex looks for the class
# consisting of anything that is not in Basic Latin and not in the
# Latin-1 special characters, so including all Unicode except those blocks.
15: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : False,
	'find' : '[^\\p{InBasic_Latin}\\p{InLatin-1_Supplement}]',
	'label' : 'not Latin-1',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find letters not in the Latin-1 set',
	'word' : False
}
# Find any non-7-bit character: the class of letters that are not
# in the Basic Latin Unicode block.
16: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : False,
	'find' : '[^\\p{InBasic_Latin}]',
	'label' : 'not 7-bit',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find letters not in the 7-bit ascii set',
	'word' : False
}
# Find the end of a paragraph (two newlines) when it is preceded
# by a "word" character and possibly a close-quote but not some
# punctuation. Single quote is escaped.
17: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : False,
	'find' : '(?<=\w["\'»]?)\\n\\n',
	'label' : 'para-no-p',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find end of paragraph without punctuation',
	'word' : False
}
# Find a line that is more than 75 characters. Regex is
# the class of not-a-newline characters, 76 or more of them.
18: {		'all' : None,
	'andnext' : None,
	'andprior' : None,
	'case' : None,
	'find' : '[^\\n]{76,}',
	'label' : 'line>75',
	'regex' : True,
	'rep1' : None,
	'rep2' : None,
	'rep3' : None,
	'tooltip' : 'Find line longer than 75 characters',
	'word' : None
}
# Find any kind of dash at the end of a line.
19: {		'all' : False,
	'andnext' : False,
	'andprior' : False,
	'case' : False,
	'find' : '[\\u002D\\u2012\\u2013\\u2014]+\\n',
	'label' : 'eol-hy',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find hyphen (or minus, en-, em-dash) at end of line',
	'word' : False
}
# Find any amount of spaces preceding a newline.
20: {		'all' : False,
	'andnext' : True,
	'andprior' : False,
	'case' : False,
	'find' : '[\\u0020\\u00A0]+\\n',
	'label' : 'eol-sp',
	'regex' : True,
	'rep1' : '\\n',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find space (or nonbreaking-space) at end of line',
	'word' : False
}
# Find a closing quote with no preceding punctuation. Regex is, find
# some kind of quote, such that it is preceded by a non-punctuation and
# followed by a space, right-paren, or right-bracket.
21: {		'all' : None,
	'andnext' : None,
	'andprior' : None,
	'case' : False,
	'find' : '(?<=[^\\.\\,;:?!])[\\\'\\"\\»\\«](?=[\\s\\)\\]])',
	'label' : 'endqnop',
	'regex' : True,
	'rep1' : None,
	'rep2' : None,
	'rep3' : None,
	'tooltip' : 'Find end-quote without preceding punctuation',
	'word' : None
}
# Find double punctuation.
22: {		'all' : None,
	'andnext' : None,
	'andprior' : None,
	'case' : False,
	'find' : '[\\.\\,;:?!]{2,}',
	'label' : 'dblpunc',
	'regex' : True,
	'rep1' : None,
	'rep2' : None,
	'rep3' : None,
	'tooltip' : 'Find two or more adjacent . , ; : ? !',
	'word' : None
}

# Find any asterisk, presumably proofer note. Regex uses 
# negative lookbehind (?<!) and negative lookahead (?!)
# to reject asterisks that are preceded or followed by slash
# (\x2f because using literal \\slash doesn't seem to work)
23: {		'all' : None,
	'andnext' : None,
	'andprior' : None,
	'case' : None,
	'find' : '(?<!\\x2f)\\*(?!\\x2f)',
	'label' : '*',
	'regex' : True,
	'rep1' : None,
	'rep2' : None,
	'rep3' : None,
	'tooltip' : 'Find non-formatting asterisk',
	'word' : None
}


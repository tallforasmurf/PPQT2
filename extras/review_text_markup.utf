#
# Saved user-buttons from the Find panel. Each button definition starts with
# a number that says what button to set. The button numbers go from 0 (upper
# left button) to 23 (lower right button). Or use 99 to mean, the unused
# button with the highest number. The button number is followed by a colon.
#
# Next comes a Python dictionary { key:value, key:value...}. Each key is a
# string such as 'find' or 'regex' that names a part of the Find panel.
# Each value is either True, False, or a 'quoted string'. In a quoted string,
# every backslash must be doubled!
#
# The only required key is 'label'. Its value is a string that is the label
# on the button. Use the 'tooltip' key to give an explanation that pops up
# when the mouse is over the button.
#
# Allow space or tabs around <tb> but must be on line by itself. Use [ \t]
# instead of \s because the latter includes newline.

18: {		'all' : False,
	'andnext' : True,
	'andprior' : False,
	'case' : False,
	'find' : '(?<=\\n)[ \\t]*<tb>[ \\t]*(?=\\n)',
	'label' : 'tb -> *****',
	'regex' : True,
	'rep1' : '       *       *       *       *       *',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find &lt;tb>, replace with 5-star string',
	'word' : False
}

19: {		'all' : False,
	'andnext' : True,
	'andprior' : False,
	'case' : False,
	'find' : '(?<=\\n)(/[CFQRPTUX\\*]|[CFQRPTUX\\*]/)',
	'label' : 'scan /CFQRPTUX*',
	'regex' : True,
	'rep1' : '',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Step through block markup codes such as /* or X/',
	'word' : False
}

20: {		'all' : False,
	'andnext' : True,
	'andprior' : False,
	'case' : False,
	'find' : '\\[typo:([^:]+):([^\\]]+)\\]',
	'label' : 'undo [typo]',
	'regex' : True,
	'rep1' : '\\2',
	'rep2' : '',
	'rep3' : '',
	'tooltip' : 'Find [typo:original:correct] markup and replace with correct word',
	'word' : False
}

#
# Note the following three swallow any whitespace following the
# markup start and preceding the markup end. This is so that
# if the text is wrongly marked "<i> word </i>" we will not leave
# it as "_ word _" but rather "_word_".
#

21: {		'all' : False,
	'andnext' : True,
	'andprior' : False,
	'case' : False,
	'find' : '<sc>\\s*([^<]+)\\s*</sc>',
	'label' : 'sc convert',
	'regex' : True,
	'rep1' : '\\1',
	'rep2' : '$\\1$',
	'rep3' : '',
	'tooltip' : 'Find &lt;sc>stuff&lt;/sc> and change to $stuff$ or stuff',
	'word' : False
}

22: {		'all' : False,
	'andnext' : True,
	'andprior' : False,
	'case' : False,
	'find' : '<b>\\s*([^<]+)\\s*</b>',
	'label' : 'b convert',
	'regex' : True,
	'rep1' : '\\1',
	'rep2' : '$\\1$',
	'rep3' : '',
	'tooltip' : 'Find &lt;b>stuff&lt;/i> and change to $stuff$ or stuff',
	'word' : False
}

23: {		'all' : False,
	'andnext' : True,
	'andprior' : False,
	'case' : False,
	'find' : '<i>\\s*([^<]+)\\s*</i>',
	'label' : 'i convert',
	'regex' : True,
	'rep1' : '_\\1_',
	'rep2' : '\\1',
	'rep3' : '',
	'tooltip' : 'Find &lt;i>stuff&lt;/i> and change to _stuff_ or stuff',
	'word' : False
}

